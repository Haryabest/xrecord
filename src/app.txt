import React, { useEffect, useRef, useState } from "react";
import { invoke } from "@tauri-apps/api/core";
import { open } from "@tauri-apps/plugin-dialog";
import Toolbar from "./Toolbar"; // Импортируем ваш тулбар

const ScreenRecorder: React.FC = () => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const chunksRef = useRef<Blob[]>([]);
  const [folderPath, setFolderPath] = useState<string | null>(null);

  const mainFolderName = "4kvishmat";

  useEffect(() => {
    const initializeFolder = async () => {
      try {
        const folderPath = await invoke("create_folder", { folderName: mainFolderName }) as string;
        console.log("Папка создана/существует:", folderPath);
        setFolderPath(folderPath);
      } catch (error) {
        console.error("Ошибка при создании папки:", error);
      }
    };

    initializeFolder();
  }, []);

  const openFolderDialog = async () => {
    try {
      const selectedFolderPath = await open({
        directory: true,
      });

      const folderPathString = selectedFolderPath as string;
      if (folderPathString) {
        setFolderPath(folderPathString);
        console.log("Выбранная папка:", folderPathString);
      } else {
        alert("Папка не была выбрана.");
      }
    } catch (err) {
      console.error("Ошибка при открытии проводника:", err);
      alert("Ошибка при открытии проводника: " + err);
    }
  };

  const startRecording = async () => {
    if (!folderPath) {
      alert("Пожалуйста, выберите папку для сохранения видео.");
      return;
    }

    try {
      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: true,
        audio: true,
      });

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.play();
      }

      chunksRef.current = [];

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: "video/webm",
      });

      mediaRecorderRef.current = mediaRecorder;

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        stream.getTracks().forEach((track) => track.stop());
        setIsRecording(false);

        if (chunksRef.current.length > 0) {
          try {
            const blob = new Blob(chunksRef.current, { type: "video/webm" });
            const buffer = await blob.arrayBuffer();
            const bytes = new Uint8Array(buffer);

            const fileName = `recording_${Date.now()}.webm`;

            await invoke("save_recording", {
              recording: Array.from(bytes),
              filename: fileName,
              path: folderPath,
            });

            alert(`Видео сохранено в папке: ${folderPath}`);
          } catch (error) {
            console.error("Ошибка при сохранении видео:", error);
            alert("Ошибка при сохранении видео: " + error);
          }
        }
      };

      mediaRecorder.start(1000);
      setIsRecording(true);
    } catch (error) {
      console.error("Ошибка при доступе к экрану:", error);
      alert("Ошибка при доступе к экрану: " + error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== "inactive") {
      mediaRecorderRef.current.stop();
    }
  };

  return (
    <div className="screen-recorder">
      <Toolbar />
      <video
        ref={videoRef}
        className="video-preview"
        style={{ width: "102%", marginBottom: "10px",marginTop: "38px",marginLeft: "-8px" }}
        controls
      />
      <div className="controls">
        <button
          onClick={isRecording ? stopRecording : startRecording}
          className={isRecording ? "stop" : "start"}
          style={{
            padding: "10px 10px",
            fontSize: "16px",
            backgroundColor: isRecording ? "#ff4444" : "#44ff44",
            color: "white",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer",
          }}
        >
          {isRecording ? "Остановить запись" : "Начать запись"}
        </button>
        <button
          onClick={openFolderDialog}
          style={{
            padding: "10px 10px",
            fontSize: "10px",
            backgroundColor: "#0088ff",
            color: "white",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer",
            marginTop: "10px",
          }}
        >
          Выбрать папку для сохранения
        </button>
      </div>

      {folderPath && <p>Выбранная папка: {folderPath}</p>}
    </div>
  );
};

export default ScreenRecorder;
